#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
#include <header.h>

#define MAX_CMD_LENGTH 2048
#define MAX_CMDS 512

int main(void){
  int args;
  char *commands[MAX_CMDS];
  int bgT = 0;
  int tstp;
  int sigint;
  while(1){
    tstp = 0;
    sigint = 0;
    args = 0;
    memset(commands, '\0', MAX_CMDS);
    fflush(stdout);
    fflush(stdin);
    intput(commands, &args);
    shell()
  }
}

void input(char **commands, int *args){
  char *key;
  char input[MAX_CMD_LENGTH];

  while(input[0] == '#' || strlen(input) < 1){
    printf(": ");
    fgets(input, MAX_CMD_LENGTH, stdin);
    strtok(input, "\n");

  }
  for(int i = 0; i < strlen(input); i++){
    if((strlen(input) > i +1) && (input[i] == '$') && (input[i+1] == '$')){
      char *temp = strdup(input);
      temp[i] = '%';
      temp[i+1] = 'd';
      sprintf(input, temp, getpid());
      free(temp);
    }

  }
  key = strtok(input, " ");
  while(key != NULL){
    commands[*args] = strdup(key);
    *args = *args +1;
    key = strtok(NULL, " ");
  }
}

void shell(int tstp, int sigint, int bgT, char **commands, int *args){
  int bgFlag = 0;
	int status;
	int redirect;
	int FD;
	int i;
	pid_t pid = 0;
	struct sigaction SIGINT_action = {{0}}, SIGTSTP_action = {{0}};

	SIGINT_action.sa_handler = SIG_IGN;
	sigfillset(&SIGINT_action.sa_mask);
	SIGINT_action.sa_flags = 0;
	sigaction(SIGINT, &SIGINT_action, NULL);

	SIGTSTP_action.sa_handler = handle_SIGTSTP;
	sigfillset(&SIGTSTP_action.sa_mask);
	SIGTSTP_action.sa_flags = 0;
  sigaction(SIGTSTP, &SIGTSTP_action, NULL);

	//pid - getpid();

		if (strcmp(commands[*args - 1], "&") == 0) {
			(*args)--;
			commands[*args] = NULL;
			if (bgT == 0){
				bgFlag = 1;
				(*args)++;
			}
		}

		if (strcmp(commands[0], "exit") == 0) {
			fflush(stdout);
			while (1){
				exit(0);
			}
		} 

		else if (strcmp(commands[0], "cd") == 0) {
			if (*args == 1)
				chdir(getcwd());
			else
				chdir(commands[1]);
		}

		else if (strcmp(commands[0], "status") == 0){
			if (WIFEXITED(status)){
				printf("exit value %d\n", WEXITSTATUS(status));
			}
			else if (WIFSIGNALED(status)){
				printf("terminated by signal %d\n", WTERMSIG(status));
			}
		}
		
		else{
			pid = fork();
			switch (pid){
				case -1:
					perror("fork() failed\n");
					exit(1);
					break;
				case 0: 
					if (bgFlag == 0){
						SIGINT_action.sa_handler = SIG_DFL;
						sigaction(SIGINT, &SIGINT_action, NULL);
					}
					
					for (i = 1; i < *args; i++) {
						if (bgFlag == 1) {	
							redirect = 1;
							FD = open("/dev/null", O_RDONLY);
							int result = dup2(FD, STDIN_FILENO);
							if (result == -1) { 
								perror("source open()"); 
								exit(1); 
							}
						}
						if ((strcmp(commands[i], "<") == 0)) {
							redirect = 1;
							
							FD = open(commands[i + 1], O_RDONLY);
							int result = dup2(FD, STDIN_FILENO);
							if (result == -1) { 
								perror("source open()"); 
								exit(1); 
							}
						}
						if ((strcmp(commands[i], ">") == 0))  {
							redirect = 1;
							FD = open(commands[i + 1], O_CREAT | O_RDWR | O_TRUNC, 0644);
							int result = dup2(FD, STDOUT_FILENO); 
							if (result == -1){
								perror("source open()"); 
								exit(1); 
							}
						}
					}
					if (redirect == 1){
						close(FD);
						for(i = 1; i < *args; i++)
							commands[i] = NULL;
					}
					if (execvp(commands[0],) && tstp != 1 && sigint != 1){
						fprintf(stderr, "%s: No such file or directory\n",[0]);
						exit(1);
					}
					break;

				default:
					if (bgFlag == 1){
						printf("background pid is %d\n", pid);
					}
					else { 
						waitpid(pid, &status, 0);
						if(tstp != 1){
							if (WIFSIGNALED(status) == 1 && WTERMSIG(status) != 0){
								printf("terminated by signal %d\n", WTERMSIG(status));
							}
							while (pid != -1){
								pid = waitpid(-1, &status, WNOHANG);	
								if (WIFEXITED(status) != 0 && pid > 0){
									printf("background pid %d is done: exit value %d\n", pid, WEXITSTATUS(status));
								}
								else if (WIFSIGNALED(status) != 0 && pid > 0 && bgT == 0){
									printf("background pid %d is done: terminated by signal %d\n", pid, WTERMSIG(status));
								}
							}
						}
					}
				
				break;
			}
		}
}

void tstp_handle(int s){
  if(bgT == 0){
    char *output = "\n Entering forground-only mode(& is now ignored)\n";
    bgT = 1;
    write(STDOUT_FILENO, output, 50);
  } else{
      char* output = "\nExiting foreground-only mode\n";
		  bgToggle = 0;
		  write(STDOUT_FILENO, output, 30);
  }
}